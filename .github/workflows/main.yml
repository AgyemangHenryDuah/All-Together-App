name: Deploy to Amazon ECR and ECS with Blue/Green

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/e0u3b5m8
  ECR_REPOSITORY: all-together-repo
  IMAGE_TAG: latest
  ECS_CLUSTER: MyAppCluster
  ECS_SERVICE: MyAppService
  ECS_TASK_FAMILY: MyAppTask
  CODEDEPLOY_APPLICATION: All-Together-Lab-CodeDeployApplication-y8VXqHADneJS
  CODEDEPLOY_DEPLOYMENT_GROUP: All-Together-Lab-CodeDeploymentGroup-1HW05I33RL6XN

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Fetch current ECS task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_FAMILY --query "taskDefinition" --output json \
        | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' > task-definition.json

    - name: Update task definition with new image
      run: |
        jq --arg IMAGE_URI "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE_URI' task-definition.json > new-task-definition.json

    - name: Register new ECS task definition
      id: register-task
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query "taskDefinition.taskDefinitionArn" --output text)
        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Create AppSpec file for CodeDeploy
      run: |
        cat > appspec.yaml << EOL
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: ${{ env.NEW_TASK_DEF_ARN }}
                LoadBalancerInfo:
                  ContainerName: "MyAppContainer"
                  ContainerPort: 3000
        EOL

    - name: Create deployment config file
      run: |
        # Ensure correct base64 encoding without newline issues
        BASE64_CONTENT=$(base64 -w 0 appspec.yaml)
        
        # Correct SHA-256 checksum calculation
        SHA256_HASH=$(echo -n "$BASE64_CONTENT" | base64 --decode | sha256sum | cut -d' ' -f1)

        # Create deployment config JSON
        cat > deployment-config.json << EOL
        {
          "applicationName": "${{ env.CODEDEPLOY_APPLICATION }}",
          "deploymentGroupName": "${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}",
          "revision": {
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": "$BASE64_CONTENT",
              "sha256": "$SHA256_HASH"
            }
          }
        }
        EOL

    - name: Start AWS CodeDeploy Deployment
      id: deploy
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment --cli-input-json file://deployment-config.json --query "deploymentId" --output text)
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        echo "Starting deployment: $DEPLOYMENT_ID"

    - name: Monitor Deployment Status
      run: |
        while true; do
          DEPLOYMENT_STATUS=$(aws deploy get-deployment --deployment-id ${{ env.DEPLOYMENT_ID }} --query "deploymentInfo.status" --output text)
          echo "Deployment Status: $DEPLOYMENT_STATUS"

          if [[ "$DEPLOYMENT_STATUS" == "Succeeded" ]]; then
            echo "Deployment succeeded!"
            break
          elif [[ "$DEPLOYMENT_STATUS" == "Failed" || "$DEPLOYMENT_STATUS" == "Stopped" ]]; then
            echo "Deployment failed or was stopped!"
            exit 1
          fi

          echo "Checking again in 30 seconds..."
          sleep 30
        done
