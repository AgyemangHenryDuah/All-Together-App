name: Deploy to Amazon ECR and ECS with Blue/Green
on:
  push:
    branches: [ "main" ]
env:
  AWS_REGION: us-east-1
  ECR_PUBLIC_REGISTRY: public.ecr.aws/e0u3b5m8
  ECR_REPOSITORY: all-together-repo
  IMAGE_TAG: henryagyemang_app
  ECS_SERVICE: MyAppService
  ECS_CLUSTER: MyAppCluster
  TASK_FAMILY: MyAppTask
  CONTAINER_NAME: MyAppContainer
  CONTAINER_PORT: 3000
  CODEDEPLOY_APPLICATION: All-Together-Lab-CodeDeployApplication-tNrSazGsjV7B
  CODEDEPLOY_DEPLOYMENT_GROUP: All-Together-Lab-CodeDeploymentGroup-1PFQ6HYAX0WD4
jobs:
  deploy:
    name: Deploy to ECR and ECS
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon Public ECR
      run: |
        aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Check AWS resources exist
      run: |
        echo "Checking ECS cluster..."
        aws ecs describe-clusters --clusters $ECS_CLUSTER
        
        echo "Checking ECS service..."
        aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE
        
        echo "Checking CodeDeploy application..."
        aws deploy get-application --application-name $CODEDEPLOY_APPLICATION || echo "CodeDeploy application not found: $CODEDEPLOY_APPLICATION"
        
        echo "Checking CodeDeploy deployment group..."
        aws deploy get-deployment-group --application-name $CODEDEPLOY_APPLICATION --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP || echo "Deployment group not found: $CODEDEPLOY_DEPLOYMENT_GROUP"
    
    - name: Get current task definition
      id: task-def
      run: |
        # Use the latest active revision
        TASK_DEF_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].taskDefinition' --output text)
        
        if [ -z "$TASK_DEF_ARN" ]; then
          echo "No task definition found for service $ECS_SERVICE"
          exit 1
        fi
        
        echo "Using task definition: $TASK_DEF_ARN"
        
        # Get the task definition details
        aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json > task-definition.json
        
        echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
    
    - name: Render new task definition
      id: render-task-def
      run: |
        # Clean task-definition.json and remove unwanted fields
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > cleaned-task-definition.json
        
        # Update the image with the new one
        IMAGE_NAME="${{ steps.build-image.outputs.image }}"
        echo "Using image: $IMAGE_NAME"
        jq ".containerDefinitions[0].image = \"$IMAGE_NAME\"" cleaned-task-definition.json > updated-task-definition.json
        
        echo "Updated task definition:"
        cat updated-task-definition.json

        
        
    - name: Register new task definition
      id: register-task-def
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "new_task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Debug environment variables
      run: |
        echo "CODEDEPLOY_APPLICATION: $CODEDEPLOY_APPLICATION"
        echo "CODEDEPLOY_DEPLOYMENT_GROUP: $CODEDEPLOY_DEPLOYMENT_GROUP"

    - name: Create CodeDeploy Deployment
      run: |
        aws deploy create-deployment \
          --application-name "$CODEDEPLOY_APPLICATION" \
          --deployment-group-name "$CODEDEPLOY_DEPLOYMENT_GROUP" \
          --revision "$(cat <<EOF
        {
          "revisionType": "AppSpecContent",
          "appSpecContent": {
            "content": "{\"version\":1,\"Resources\":[{\"myApp\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"${{ steps.register-task-def.outputs.new_task_definition_arn }}\",\"LoadBalancerInfo\":{\"ContainerName\":\"$CONTAINER_NAME\",\"ContainerPort\":$CONTAINER_PORT}}}}]}"
          }
        }
        EOF
        )" \
          --description "Blue/Green deployment triggered by GitHub Actions"

