name: Deploy to Amazon ECS with Blue-Green Deployment

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_PUBLIC_REGISTRY: public.ecr.aws/e0u3b5m8
  ECR_REPOSITORY: all-together-repo
  IMAGE_TAG: henryagyemang_app
  ECS_CLUSTER: MyAppCluster
  ECS_SERVICE: MyAppService
  TASK_DEFINITION_FILE: ecs-task-definition.json
  CODEDEPLOY_APP_NAME: All-Together-Lab-CodeDeployApplication-y8VXqHADneJS
  CODEDEPLOY_DEPLOYMENT_GROUP: All-Together-Lab-CodeDeploymentGroup-1HW05I33RL6XN

jobs:
  deploy:
    name: Deploy to ECS with Blue-Green Deployment
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon Public ECR
      run: |
        aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        docker build -t $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Register new ECS task definition
      run: |
        TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition MyAppTask)
        NEW_TASK_DEF=$(echo "$TASK_DEFINITION_JSON" | jq --arg IMAGE "$ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)')
        echo "$NEW_TASK_DEF" > $TASK_DEFINITION_FILE
        aws ecs register-task-definition --cli-input-json file://$TASK_DEFINITION_FILE

    - name: Get latest task definition ARN
      id: task-def-arn
      run: |
        TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition MyAppTask --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Create a new deployment with AWS CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name $CODEDEPLOY_APP_NAME \
          --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP \
          --revision file://$GITHUB_WORKSPACE/deployment.json \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce

    - name: Wait for deployment to finish
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments --application-name $CODEDEPLOY_APP_NAME --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP --query 'deployments[0]' --output text)
        aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
