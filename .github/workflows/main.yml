name: CI/CD
on:
  push:
    branches: [ "main" ]

env:
  # Global environment variables available to all jobs
  AWS_REGION: us-east-1
  STACK_NAME: All-Together-Lab
  
jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    env:
      # ECR configuration
      ECR_PUBLIC_REGISTRY: public.ecr.aws/e0u3b5m8
      ECR_REPOSITORY: all-together-repo
      IMAGE_TAG: ${{ github.actor }}_app

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon Public ECR
      run: |
        aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        docker build -t ${{ env.ECR_PUBLIC_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ env.ECR_PUBLIC_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        echo "image=${{ env.ECR_PUBLIC_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy with Blue/Green Strategy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    env:
      # ECR configuration (same as build job)
      ECR_PUBLIC_REGISTRY: public.ecr.aws/e0u3b5m8
      ECR_REPOSITORY: all-together-repo
      IMAGE_TAG: ${{ github.actor }}_app
      
      # ECS configuration
      ECS_TASK_FAMILY: MyAppTask  # From CloudFormation template
      ECS_CPU: 512                # From CloudFormation template
      ECS_MEMORY: 1024            # From CloudFormation template
      
      # Container configuration
      CONTAINER_NAME: MyAppContainer  # From CloudFormation template
      CONTAINER_PORT: 3000            # From CloudFormation template

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Register new task definition
        id: task-def
        run: |
          # Get current task definition
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} --query 'taskDefinition' > task-definition.json || echo "Task definition not found, will create new one"

          if [ -s task-definition.json ]; then
            # Update container image in task definition to use the latest tag
            jq --arg IMAGE "${{ env.ECR_PUBLIC_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" '.containerDefinitions[0].image = $IMAGE' task-definition.json > new-task-definition.json
            
            # Register new task definition version
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --family ${{ env.ECS_TASK_FAMILY }} \
              --requires-compatibilities FARGATE \
              --network-mode awsvpc \
              --cpu ${{ env.ECS_CPU }} \
              --memory ${{ env.ECS_MEMORY }} \
              --execution-role-arn $(jq -r '.executionRoleArn' task-definition.json) \
              --task-role-arn $(jq -r '.taskRoleArn' task-definition.json) \
              --container-definitions "$(jq '.containerDefinitions' new-task-definition.json)" \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
          else
            echo "Failed to get task definition. Check if it exists or if you have correct permissions."
            exit 1
          fi

          echo "task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Create AppSpec file
        run: |
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "${{ steps.task-def.outputs.task_definition_arn }}"
                  LoadBalancerInfo:
                    ContainerName: "${{ env.CONTAINER_NAME }}"
                    ContainerPort: ${{ env.CONTAINER_PORT }}
                  PlatformVersion: "LATEST"
          EOF

          # Print the AppSpec file
          cat appspec.yaml

      - name: Get CodeDeploy application and deployment group names
        id: codedeploy-info
        run: |
          # Try to get names from CloudFormation outputs first
          APP_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='CodeDeployApplicationName'].OutputValue" --output text)
          GROUP_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='DeploymentGroupName'].OutputValue" --output text)
          
          # If not found, try to get the physical resource IDs
          if [ -z "$APP_NAME" ] || [ "$APP_NAME" = "None" ]; then
            APP_NAME=$(aws cloudformation describe-stack-resource --stack-name ${{ env.STACK_NAME }} --logical-resource-id CodeDeployApplication --query "StackResourceDetail.PhysicalResourceId" --output text)
          fi
          
          if [ -z "$GROUP_NAME" ] || [ "$GROUP_NAME" = "None" ]; then
            GROUP_NAME=$(aws cloudformation describe-stack-resource --stack-name ${{ env.STACK_NAME }} --logical-resource-id CodeDeploymentGroup --query "StackResourceDetail.PhysicalResourceId" --output text)
          fi
          
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "group_name=$GROUP_NAME" >> $GITHUB_OUTPUT

      - name: Start CodeDeploy deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ steps.codedeploy-info.outputs.app_name }} \
            --deployment-group-name ${{ steps.codedeploy-info.outputs.group_name }} \
            --revision revisionType=AppSpecContent,appSpecContent="{\"content\":\"$(cat appspec.yaml | sed 's/"/\\"/g')\"}" \
            --query 'deploymentId' \
            --output text)
          
          echo "Started deployment: $DEPLOYMENT_ID"

          # Monitor the deployment status
          aws deploy get-deployment --deployment-id $DEPLOYMENT_ID

          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Monitor the deployment progress in the AWS CodeDeploy console."
